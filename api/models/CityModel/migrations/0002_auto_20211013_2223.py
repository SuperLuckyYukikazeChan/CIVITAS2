# Generated by Django 3.2.5 on 2021-10-13 22:23

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('MaterialModel', '0017_auto_20210813_2354'),
        ('CityModel', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Default_Open_Difficulty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_plain_open_difficulty', models.IntegerField(default=100, verbose_name='平原基准开垦难度')),
                ('default_hill_open_difficulty', models.IntegerField(default=400, verbose_name='丘陵基准开垦难度')),
                ('default_mountain_open_difficulty', models.IntegerField(default=1000, verbose_name='山地基准开垦难度')),
                ('default_freshwater_open_difficulty', models.IntegerField(default=200, verbose_name='淡水基准开垦难度')),
                ('default_saltwater_open_difficulty', models.IntegerField(default=200, verbose_name='咸水基准开垦难度')),
                ('double_parameter', models.IntegerField(default=200, verbose_name='基准难度翻倍参数')),
            ],
            options={
                'verbose_name': '基准开垦难度参数',
            },
        ),
        migrations.AlterModelOptions(
            name='city',
            options={'verbose_name': '城市'},
        ),
        migrations.RemoveField(
            model_name='city',
            name='avatar',
        ),
        migrations.AlterField(
            model_name='city',
            name='climate',
            field=models.CharField(choices=[('温带季风', '温带季风'), ('亚热带季风', '亚热带季风'), ('热带季风', '热带季风'), ('地中海', '地中海'), ('温带大陆', '温带大陆'), ('温带海洋', '温带海洋')], default='温带季风', max_length=20, verbose_name='气候'),
        ),
        migrations.AlterField(
            model_name='city',
            name='name',
            field=models.CharField(max_length=20, verbose_name='城市名'),
        ),
        migrations.AlterField(
            model_name='city',
            name='precipitation',
            field=models.FloatField(verbose_name='当前降水量'),
        ),
        migrations.AlterField(
            model_name='city',
            name='temperature',
            field=models.FloatField(verbose_name='当前气温'),
        ),
        migrations.AlterField(
            model_name='city',
            name='weather',
            field=models.CharField(choices=[('晴', '晴'), ('多云', '多云'), ('阴', '阴'), ('小雨', '小雨'), ('小雪', '小雪'), ('大雨', '大雨'), ('大雪', '大雪')], default='晴', max_length=20, verbose_name='当前天气'),
        ),
        migrations.CreateModel(
            name='Suburb',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='县/郊区名')),
                ('prosperity_value', models.IntegerField(verbose_name='繁荣值')),
                ('governance_value', models.IntegerField(verbose_name='治理值')),
                ('industrial_value', models.IntegerField(verbose_name='产业值')),
                ('plain_open_difficulty', models.FloatField(default=100, verbose_name='平原开垦难度')),
                ('hill_open_difficulty', models.FloatField(default=400, verbose_name='丘陵开垦难度')),
                ('mountain_open_difficulty', models.FloatField(default=1000, verbose_name='山地开垦难度')),
                ('freshwater_open_difficulty', models.FloatField(default=200, verbose_name='淡水开垦难度')),
                ('saltwater_open_difficulty', models.FloatField(default=200, verbose_name='咸水开垦难度')),
                ('plain_open_lands', models.FloatField(default=0, verbose_name='平原已开垦土地数量')),
                ('hill_open_lands', models.FloatField(default=0, verbose_name='丘陵已开垦土地数量')),
                ('mountain_open_lands', models.FloatField(default=0, verbose_name='山地已开垦土地数量')),
                ('freshwater_open_lands', models.FloatField(default=0, verbose_name='淡水已开垦土地数量')),
                ('saltwater_open_lands', models.FloatField(default=0, verbose_name='咸水已开垦土地数量')),
                ('plain_parameter', models.IntegerField(default=-1, verbose_name='平原土地参数，如为-1则代表该郊区没有该类型土地，参数均除以100后使用（方便两位小数），        100参数代表每开垦1个基准难度翻倍参数时开垦难度翻倍，200参数代表每开垦1/2个基准难度翻倍参数时开垦难度翻倍（翻倍更快，开垦更难），下同')),
                ('hill_parameter', models.IntegerField(default=-1, verbose_name='丘陵土地参数')),
                ('mountain_parameter', models.IntegerField(default=-1, verbose_name='山地土地参数')),
                ('freshwater_parameter', models.IntegerField(default=-1, verbose_name='淡水土地参数')),
                ('saltwater_parameter', models.IntegerField(default=-1, verbose_name='咸水土地参数')),
                ('belong_city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CityModel.city', verbose_name='属于城市')),
                ('default_open_difficulty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CityModel.default_open_difficulty', verbose_name='基准开垦难度')),
            ],
            options={
                'verbose_name': '郊区',
            },
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='县/郊区名')),
                ('prosperity_value', models.IntegerField(verbose_name='繁荣值')),
                ('governance_value', models.IntegerField(verbose_name='治理值')),
                ('industrial_value', models.IntegerField(verbose_name='产业值')),
                ('plain_open_difficulty', models.FloatField(default=100, verbose_name='平原开垦难度')),
                ('hill_open_difficulty', models.FloatField(default=400, verbose_name='丘陵开垦难度')),
                ('mountain_open_difficulty', models.FloatField(default=1000, verbose_name='山地开垦难度')),
                ('freshwater_open_difficulty', models.FloatField(default=200, verbose_name='淡水开垦难度')),
                ('saltwater_open_difficulty', models.FloatField(default=200, verbose_name='咸水开垦难度')),
                ('plain_open_lands', models.FloatField(default=0, verbose_name='平原已开垦土地数量')),
                ('hill_open_lands', models.FloatField(default=0, verbose_name='丘陵已开垦土地数量')),
                ('mountain_open_lands', models.FloatField(default=0, verbose_name='山地已开垦土地数量')),
                ('freshwater_open_lands', models.FloatField(default=0, verbose_name='淡水已开垦土地数量')),
                ('saltwater_open_lands', models.FloatField(default=0, verbose_name='咸水已开垦土地数量')),
                ('plain_open_lands_max', models.FloatField(default=100, verbose_name='平原土地总量')),
                ('hill_open_lands_max', models.FloatField(default=100, verbose_name='丘陵土地总量')),
                ('mountain_open_lands_max', models.FloatField(default=100, verbose_name='山地土地总量')),
                ('freshwater_open_lands_max', models.FloatField(default=100, verbose_name='淡水土地总量')),
                ('saltwater_open_lands_max', models.FloatField(default=100, verbose_name='咸水土地总量')),
                ('belong_city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CityModel.city', verbose_name='属于城市')),
                ('default_open_difficulty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CityModel.default_open_difficulty', verbose_name='基准开垦难度')),
                ('list_of_special_materials_county', models.ManyToManyField(related_name='special_materials_county', to='MaterialModel.Material', verbose_name='特产表')),
            ],
            options={
                'verbose_name': '县',
            },
        ),
        migrations.CreateModel(
            name='City_Road',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.IntegerField(verbose_name='距离')),
                ('terrain', models.CharField(choices=[('平原', '平原'), ('丘陵', '丘陵'), ('山地', '山地'), ('淡水', '淡水'), ('咸水', '咸水')], default='平原', max_length=20, verbose_name='地形')),
                ('city1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='city1', to='CityModel.city', verbose_name='城市1')),
                ('city2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='city2', to='CityModel.city', verbose_name='城市2')),
            ],
            options={
                'verbose_name': '城与城道路',
            },
        ),
    ]
