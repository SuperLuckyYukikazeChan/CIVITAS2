# Generated by Django 3.2.5 on 2021-11-02 23:04

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('MaterialModel', '0001_initial'),
        ('CivitasModel', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='城市名')),
                ('average_temperature', models.FloatField(verbose_name='平均温度')),
                ('temperature_difference', models.FloatField(verbose_name='温差，最低月平均温度与最高月平均温度之差')),
                ('average_annual_precipitation', models.FloatField(verbose_name='平均年降水量')),
                ('average_annual_precipitation_days', models.FloatField(verbose_name='平均年降水日数')),
                ('average_annual_sunshine_hours', models.FloatField(verbose_name='平均年日照时数')),
                ('weather', models.CharField(choices=[('晴', '晴'), ('多云', '多云'), ('阴', '阴'), ('小雨', '小雨'), ('小雪', '小雪'), ('大雨', '大雨'), ('大雪', '大雪')], default='晴', max_length=20, verbose_name='当前天气')),
                ('temperature', models.FloatField(verbose_name='当前气温')),
                ('precipitation', models.FloatField(verbose_name='当前降水量')),
                ('is_rain', models.BooleanField(editable=False, verbose_name='是否正在下雨')),
                ('min_irrigation_default', models.IntegerField(verbose_name='最小灌溉值')),
                ('average_irrigation_default', models.IntegerField(verbose_name='平均灌溉值')),
                ('max_irrigation_default', models.IntegerField(verbose_name='最大灌溉值')),
                ('raw_fertility_default', models.IntegerField(verbose_name='默认肥力值')),
                ('is_flooding', models.BooleanField(verbose_name='是否会泛滥')),
                ('flooding', models.BooleanField(default=False, editable=False, verbose_name='是否正在泛滥')),
                ('flooding_fertility_default', models.IntegerField(blank=True, null=True, verbose_name='泛滥肥力值')),
                ('flooding_season', models.CharField(blank=True, choices=[('1', '春'), ('2', '夏'), ('3', '秋'), ('4', '冬')], max_length=20, null=True, verbose_name='泛滥季节')),
                ('irrigation_default', models.FloatField(verbose_name='当前默认灌溉值')),
                ('fertility_default', models.FloatField(verbose_name='当前默认肥力值')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('calendar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CivitasModel.calendar', verbose_name='日历')),
            ],
            options={
                'verbose_name': '城市',
                'verbose_name_plural': '城市',
            },
        ),
        migrations.CreateModel(
            name='Climate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='气候名')),
                ('rain_chance_spring', models.FloatField(verbose_name='春天下雨概率')),
                ('rain_chance_summer', models.FloatField(verbose_name='夏天下雨概率')),
                ('rain_chance_autumn', models.FloatField(verbose_name='秋天下雨概率')),
                ('rain_chance_winter', models.FloatField(verbose_name='冬天下雨概率')),
                ('rain_season_buff_spring', models.FloatField(verbose_name='春天下雨量修正')),
                ('rain_season_buff_summer', models.FloatField(verbose_name='夏天下雨量修正')),
                ('rain_season_buff_autumn', models.FloatField(verbose_name='秋天下雨量修正')),
                ('rain_season_buff_winter', models.FloatField(verbose_name='冬天下雨量修正')),
                ('raw_rain_days', models.IntegerField(verbose_name='原始下雨天数')),
            ],
            options={
                'verbose_name': '气候',
                'verbose_name_plural': '气候',
            },
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='县/郊区名')),
                ('prosperity_value', models.IntegerField(verbose_name='繁荣值')),
                ('governance_value', models.IntegerField(verbose_name='治理值')),
                ('industrial_value', models.IntegerField(verbose_name='产业值')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('belong_city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CityModel.city', verbose_name='属于城市')),
                ('list_of_special_materials_county', models.ManyToManyField(blank=True, related_name='special_materials_county', to='MaterialModel.Material_Detail', verbose_name='特产表')),
            ],
            options={
                'verbose_name': '县',
                'verbose_name_plural': '县',
            },
        ),
        migrations.CreateModel(
            name='Suburb',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='县/郊区名')),
                ('prosperity_value', models.IntegerField(verbose_name='繁荣值')),
                ('governance_value', models.IntegerField(verbose_name='治理值')),
                ('industrial_value', models.IntegerField(verbose_name='产业值')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('belong_city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CityModel.city', verbose_name='属于城市')),
            ],
            options={
                'verbose_name': '郊区',
                'verbose_name_plural': '郊区',
            },
        ),
        migrations.CreateModel(
            name='Terrain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='地形名')),
                ('default_open_difficulty', models.IntegerField(default=100, verbose_name='基准开垦难度')),
            ],
            options={
                'verbose_name': '地形',
                'verbose_name_plural': '地形',
            },
        ),
        migrations.CreateModel(
            name='Suburb_To_Terrain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.FloatField(verbose_name='None已开垦土地数量')),
                ('land_parameter', models.IntegerField(default=-1, verbose_name='None土地参数，如为-1则代表该郊区没有该类型土地，参数均除以100后使用（方便两位小数），        100参数代表每开垦1个基准难度翻倍参数时开垦难度翻倍，200参数代表每开垦1/2个基准难度翻倍参数时开垦难度翻倍（翻倍更快，开垦更难），下同')),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CityModel.suburb', verbose_name='关联郊区')),
                ('terrain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CityModel.terrain', verbose_name='地形')),
            ],
            options={
                'verbose_name': '郊区-地形中间表',
                'verbose_name_plural': '郊区-地形中间表',
            },
        ),
        migrations.AddField(
            model_name='suburb',
            name='terrain_parameter',
            field=models.ManyToManyField(through='CityModel.Suburb_To_Terrain', to='CityModel.Terrain', verbose_name='地形表'),
        ),
        migrations.CreateModel(
            name='County_To_Terrain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.FloatField(verbose_name='None已开垦土地数量')),
                ('open_lands_max', models.FloatField(verbose_name='None土地总量')),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CityModel.county', verbose_name='关联县')),
                ('terrain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CityModel.terrain', verbose_name='地形')),
            ],
            options={
                'verbose_name': '县-地形中间表',
                'verbose_name_plural': '县-地形中间表',
            },
        ),
        migrations.AddField(
            model_name='county',
            name='terrain_parameter',
            field=models.ManyToManyField(through='CityModel.County_To_Terrain', to='CityModel.Terrain', verbose_name='地形表'),
        ),
        migrations.CreateModel(
            name='City_Road',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.IntegerField(verbose_name='距离')),
                ('terrain', models.CharField(choices=[('平原', '平原'), ('丘陵', '丘陵'), ('山地', '山地'), ('淡水', '淡水'), ('咸水', '咸水')], default='平原', max_length=20, verbose_name='地形')),
                ('city1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='city1', to='CityModel.city', verbose_name='城市1')),
                ('city2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='city2', to='CityModel.city', verbose_name='城市2')),
            ],
            options={
                'verbose_name': '城与城道路',
                'verbose_name_plural': '城与城道路',
            },
        ),
        migrations.AddField(
            model_name='city',
            name='climate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CityModel.climate', verbose_name='气候'),
        ),
        migrations.AddField(
            model_name='city',
            name='list_of_producible_materials',
            field=models.ManyToManyField(related_name='producible_materials', to='MaterialModel.Material', verbose_name='可产物品表'),
        ),
        migrations.AddField(
            model_name='city',
            name='list_of_special_materials',
            field=models.ManyToManyField(blank=True, related_name='special_materials', to='MaterialModel.Material', verbose_name='特产表'),
        ),
    ]
